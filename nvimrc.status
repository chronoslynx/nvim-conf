" Handle drawing a custom status bar on every window change

" First the function to output the status text {{{
function! Status(winnum)
  let active = a:winnum == winnr()
  let bufnum = winbufnr(a:winnum)
  let stat = ''

  function! Color(active, num, content)
    if a:active
      return '%' . a:num . '*' . a:content . '%*'
    else
      return a:content
    endif
  endfunction

  let stat .= Color(active, 1, " " . toupper(mode()) . " ")
  let stat .= '%1*'
  let stat .= '%*'

  " file name
  let stat .= Color(active, 2, active ? ' »' : ' «')
  let stat .= ' %<%f'
  let stat .= ' ' . Color(active, 2, active ? '«' : '»')

  " file modfied
  let modified = getbufvar(bufnum, '&modified')
  let stat .= Color(active, 2, modified ? ' +' : '')

  " read only
  let readonly = getbufvar(bufnum, '&readonly')
  let stat .= Color(active, 2, readonly ? ' ‼' : '')

  if active && &paste
    let stat .= ' %2*' . 'p' . '%*'
  endif
  let stat .= '%='

  " git branch
  if active && exists('*fugitive#head')
    let head = fugitive#head()
    if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
      call fugitive#detect(getcwd())
      let head = fugitive#head()
    endif
  endif

  if active && !empty(head)
    let stat .= Color(active, 3, ' ← ') . head . ' '
  endif

  " file type
  let ft = getbufvar(bufnum, '&ft')
  if active && !empty(ft)
    let stat .= Color(active, 3, '← ') . ft . ' '
  endif

  return stat
endfunction
" }}}
" Next handle setting the statusbar to the outputted status text {{{
function! s:RefreshStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
  endfor
endfunction
" }}}
" Lastly call the status setter for every buffer change {{{
augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
augroup END
" }}}
